@inject NavigationManager NavigationManager
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">VisualizadorDeLeyes</a>
    </div>
</div>

@if (ShowNavMenu)
{
    <div class="@NavMenuCssClass nav-scrollable">
        <nav class="flex-column">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="weather">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="visualizador">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Visualizador
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <button class="btn btn-secondary" @onclick="ToggleNavMenu">Ocultar Menú</button>
            </div>
        </nav>
    </div>
}

@code {
    [Parameter]
    public bool ShowNavMenu { get; set; }

    [Parameter]
    public EventCallback<bool> ShowNavMenuChanged { get; set; }

    private string? NavMenuCssClass => ShowNavMenu ? null : "collapse";

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task ToggleNavMenu()
    {
        ShowNavMenu = !ShowNavMenu;
        await ShowNavMenuChanged.InvokeAsync(ShowNavMenu);
    }
}