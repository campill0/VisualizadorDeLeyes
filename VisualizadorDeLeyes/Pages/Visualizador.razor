@page "/visualizador"
@using System.Text.Json;
@using System.Text
@using VisualizadorDeLeyes.Entidades
@using System.IO;
@using Markdig;
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient


<style>
    

    body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f0f0f0;
        margin: 0;
        padding: 20px;
    }

    .contenido-ley {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .resumen-titulo, .resumen-seccion, .resumen-capitulo {
        outline: 2px solid #4a90e2;
        background-color: #e6f2ff;
        display: block;
        width: fit-content;
        padding: 0.5em;
        margin-bottom: 1em;
        border-radius: 4px;
    }

    .resumen-articulo,.resumen-disposicion {
        outline: 2px solid #6b8e23;
        background-color: #f0fff0;
        display: block;
        width: fit-content;
        padding: 0.5em;
        margin-bottom: 1em;
        border-radius: 4px;
    }

    .texto-articulo,.texto-disposicion {
        background-color: #f9f9f9;
        border: 1px solid #e0e0e0;
        padding: 1em;
        margin-bottom: 1.5em;
        border-radius: 4px;
        display: block;
        width: fit-content;
    }

    h1, h2, h3 {
        color: #2c3e50;
    }

    h6 {
        color: #d35400;
        margin-bottom: 0.5em;
    }

   

    

    .highlight {
        background-color: yellow;
        font-weight: bold;
    }

    .search-container {
        position: relative;
        margin-bottom: 20px;
        margin-top: 20px;
    }

    .search-input {
        width: 100%;
        padding: 10px;
        padding-right: 30px; /* Espacio para el botón de limpiar */
        font-size: 16px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .clear-search {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: #888;
    }

        .clear-search:hover {
            color: #333;
        }

    #scrollToTopBtn {
        display: none;
        position: fixed;
        bottom: 20px;
        right: 30px;
        z-index: 99;
        font-size: 18px;
        border: none;
        outline: none;
        background-color: #0056b3;
        color: white;
        cursor: pointer;
        padding: 15px;
        border-radius: 10%;
        transition: background-color 0.3s;
    }

        #scrollToTopBtn:hover {
            background-color: #003d82;
        }


    .resumen-ley {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        padding: 20px;
        margin-top: 20px;
        border-radius: 5px;
        white-space: pre-wrap;
        font-family: monospace;
    }

    .seleccionado {
        border-left: 3px solid blue;
        padding-left: 10px;
    }

    .titulo, .capitulo, .seccion, .articulo, .disposicion {
        margin-left: 20px;
        margin-bottom: 10px;
    }

    details {
        margin-left: 20px;
    }

    button {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 1em;
    }

    .highlight {
        background-color: yellow;
        font-weight: bold;
    }

    .filter-container {
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .filter-item {
        margin-bottom: 5px;
    }

    .filter-indent {
        margin-left: 20px;
    }

    .filter-accordion {
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .accordion-button {
        background-color: #f1f1f1;
        color: #444;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        text-align: left;
        border: none;
        outline: none;
        transition: 0.4s;
    }

        .accordion-button:hover {
            background-color: #ddd;
        }

    .accordion-content {
        padding: 0 18px;
        background-color: white;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.2s ease-out;
    }

        .accordion-content.open {
            max-height: 1000px; /* Ajusta este valor según sea necesario */
        }

    .filter-item {
        margin-bottom: 5px;
    }

    .filter-indent {
        margin-left: 20px;
    }
</style>
<h1>Visor de Leyes</h1>

<div class="version202409171245">
    <h3>Seleccionar ley preexistente:</h3>
    <select @onchange="CargarLeyPreexistente">
        <option value="">Seleccione una ley</option>
        @foreach (var leyInfo in leyesPreexistentes)
        {
            <option value="@leyInfo.Clave">@leyInfo.Titulo</option>
        }
    </select>
</div>

@if (ley != null)
{
    <div class="filter-accordion">
        <button class="accordion-button" @onclick="ToggleAccordion">Filtros</button>
        <div class="accordion-content @(isAccordionOpen ? "open" : "")">
            @foreach (var titulo in filters)
            {
                <div class="filter-item">
                    <label>
                        <input type="checkbox" checked="@titulo.IsSelected" @onchange="async (e) => { await UpdateFilterAndApply(titulo, (bool)e.Value); }" />
                        @titulo.Name
                    </label>
                    @foreach (var capitulo in titulo.Children)
                    {
                        <div class="filter-item filter-indent">
                            <label>
                                <input type="checkbox" checked="@capitulo.IsSelected" @onchange="async (e) => { await UpdateFilterAndApply(capitulo, (bool)e.Value); }" />
                                @capitulo.Name
                            </label>
                            @foreach (var seccion in capitulo.Children)
                            {
                                <div class="filter-item filter-indent">
                                    <label>
                                        <input type="checkbox" checked="@seccion.IsSelected" @onchange="async (e) => { await UpdateFilterAndApply(seccion, (bool)e.Value); }" />
                                        @seccion.Name
                                    </label>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

<div>
    <h3>O cargar una nueva ley:</h3>
    <InputFile OnChange="@LoadFile" accept=".json" />
</div>


@if (ley != null)
{
    <button @onclick="MostrarResumenLey" class="btn btn-primary mt-3 mr-1">Mostrar Resumen de la Ley</button>
    <button @onclick="MostrarLeyCompleta" class="btn btn-primary mt-3 mr-1">Mostrar ley completa</button>
    <button @onclick="ReiniciarEstado" class="btn btn-primary mt-3">Reiniciar Aplicación</button>
    <button @onclick="ToggleResumenCaja" class="btn  @(mostrarResumenCaja ? "btn-secondary" : "btn-primary") mt-3">
        @(mostrarResumenCaja ? "Ocultar Resumen" : "Mostrar Resumen")
    </button>

}
@if (mostrarResumen &&   mostrarResumenCaja)
{
    <div class="resumen-ley">
        <button @onclick="CopiarResumen" class="btn btn-primary mt-2">Copiar Resumen</button>

        <h2>Resumen de la Ley: @ley.NombreLey</h2>
        @((MarkupString)resumenLey)
       
    </div>
}

@if (mostrarLeyCompleta && mostrarResumenCaja)
{
    <div class="contenido-ley">
        <h2>Contenido Completo de la Ley: @ley.NombreLey</h2>
        <div>@((MarkupString)RenderMarkdown(contenidoLeyCompleta))</div>
    </div>
}



@if (ley == null)
{
    <p>Seleccione una ley preexistente o cargue un archivo JSON para visualizar la ley.</p>
}
else
{
   

    <div class="search-container">
        <input type="text" class="search-input" placeholder="Buscar en la ley..."
               @bind="searchTerm" @bind:event="oninput" @onkeyup="Search" />
        @if (!string.IsNullOrEmpty(searchTerm))
        {
            <button class="clear-search" @onclick="ClearSearch">X</button>
        }
    </div>


    <div class="contenido-ley">
        <h2>@ley.NombreLey</h2>

        @if (!string.IsNullOrEmpty(ley.ResumenLey))
        {
            <h3>Resumen de la Ley</h3>
            @((MarkupString)HighlightText(RenderMarkdown(ley.ResumenLey)))
        }

        @if (ley.Preambulo != null)
        {
            <h3>Preámbulo</h3>
            @((MarkupString)HighlightText(RenderMarkdown(ley.Preambulo.ResumenPreambulo)))
        }

        @foreach (var titulo in filteredTitulos)
        {
            <div class="titulo @(elementoSeleccionado == $"titulo-{titulo.NombreTitulo}" ? "seleccionado" : "")">
                <h3>
                    <button @onclick="@(() => ToggleVisibility($"titulo-{titulo.NombreTitulo}"))">
                        @(IsVisible($"titulo-{titulo.NombreTitulo}") ? "▼" : "►")
                    </button>
                    @((MarkupString)HighlightText(titulo.NombreTitulo))
                </h3>
                @if (IsVisible($"titulo-{titulo.NombreTitulo}"))
                {
                    @if (!string.IsNullOrEmpty(titulo.ResumenTitulo))
                    {
                        <span class="resumen resumen-titulo">
                            @((MarkupString)HighlightText(RenderMarkdown(titulo.ResumenTitulo)))
                        </span>
                    }
                    @foreach (var articulo in titulo.Articulos.Where(a => ContainsSearchTerm(a)))
                    {
                        <div class="articulo">
                            <h6>
                                <button @onclick="@(() => ToggleVisibility($"articulo-{articulo.NumeroArticulo}"))">
                                    @(IsVisible($"articulo-{articulo.NumeroArticulo}") ? "▼" : "►")
                                </button>
                                Artículo @articulo.NumeroArticulo: @((MarkupString)HighlightText(articulo.NombreArticulo))
                            </h6>
                            @if (IsVisible($"articulo-{articulo.NumeroArticulo}"))
                            {
                                @if (!string.IsNullOrEmpty(articulo.ResumenArticulo))
                                {
                                    <span class="resumen resumen-articulo">
                                        @((MarkupString)HighlightText(RenderMarkdown(articulo.ResumenArticulo)))
                                    </span>
                                }
                                <details>
                                    <summary>Ver texto completo</summary>
                                    <span class="texto-articulo">
                                        @((MarkupString)HighlightText(RenderMarkdown(articulo.TextoCompletoArticulo)))
                                    </span>
                                </details>
                            }
                        </div>
                    }
                    @foreach (var capitulo in titulo.Capitulos.Where(c => ContainsSearchTerm(c)))
                    {
                        <div class="capitulo @(elementoSeleccionado == $"capitulo-{capitulo.NombreCapitulo}" ? "seleccionado" : "")">
                            <h4>
                                <button @onclick="@(() => ToggleVisibility($"capitulo-{capitulo.NombreCapitulo}"))">
                                    @(IsVisible($"capitulo-{capitulo.NombreCapitulo}") ? "▼" : "►")
                                </button>
                                @((MarkupString)HighlightText(capitulo.NombreCapitulo))
                            </h4>
                            @if (IsVisible($"capitulo-{capitulo.NombreCapitulo}"))
                            {
                                @if (!string.IsNullOrEmpty(capitulo.ResumenCapitulo))
                                {
                                    <span class="resumen resumen-capitulo">
                                        @((MarkupString)HighlightText(RenderMarkdown(capitulo.ResumenCapitulo)))
                                    </span>
                                }
                                @foreach (var articulo in capitulo.Articulos.Where(a => ContainsSearchTerm(a)))
                                {
                                    <div class="articulo">
                                        <h6>
                                            <button @onclick="@(() => ToggleVisibility($"articulo-{articulo.NumeroArticulo}"))">
                                                @(IsVisible($"articulo-{articulo.NumeroArticulo}") ? "▼" : "►")
                                            </button>
                                            Artículo @articulo.NumeroArticulo: @((MarkupString)HighlightText(articulo.NombreArticulo))
                                        </h6>
                                        @if (IsVisible($"articulo-{articulo.NumeroArticulo}"))
                                        {
                                            @if (!string.IsNullOrEmpty(articulo.ResumenArticulo))
                                            {
                                                <span class="resumen resumen-articulo">
                                                    @((MarkupString)HighlightText(RenderMarkdown(articulo.ResumenArticulo)))
                                                </span>
                                            }
                                            <details>
                                                <summary>Ver texto completo</summary>
                                                <span class="texto-articulo">
                                                    @((MarkupString)HighlightText(RenderMarkdown(articulo.TextoCompletoArticulo)))
                                                </span>
                                            </details>
                                        }
                                    </div>
                                }
                                @foreach (var seccion in capitulo.Secciones.Where(s => ContainsSearchTerm(s)))
                                {
                                    <div class="seccion @(elementoSeleccionado == $"seccion-{seccion.NombreSeccion}" ? "seleccionado" : "")">
                                        <h5>
                                            <button @onclick="@(() => ToggleVisibility($"seccion-{seccion.NombreSeccion}"))">
                                                @(IsVisible($"seccion-{seccion.NombreSeccion}") ? "▼" : "►")
                                            </button>
                                            @((MarkupString)HighlightText(seccion.NombreSeccion))
                                        </h5>
                                        @if (IsVisible($"seccion-{seccion.NombreSeccion}"))
                                        {
                                            @if (!string.IsNullOrEmpty(seccion.ResumenSeccion))
                                            {
                                                <span class="resumen resumen-seccion">
                                                    @((MarkupString)HighlightText(RenderMarkdown(seccion.ResumenSeccion)))
                                                </span>
                                            }

                                            @foreach (var articulo in seccion.Articulos.Where(a => ContainsSearchTerm(a)))
                                            {
                                                <div class="articulo">
                                                    <h6>
                                                        <button @onclick="@(() => ToggleVisibility($"articulo-{articulo.NumeroArticulo}"))">
                                                            @(IsVisible($"articulo-{articulo.NumeroArticulo}") ? "▼" : "►")
                                                        </button>
                                                        Artículo @articulo.NumeroArticulo: @((MarkupString)HighlightText(articulo.NombreArticulo))
                                                    </h6>
                                                    @if (IsVisible($"articulo-{articulo.NumeroArticulo}"))
                                                    {
                                                        @if (!string.IsNullOrEmpty(articulo.ResumenArticulo))
                                                        {
                                                            <span class="resumen resumen-articulo">
                                                                @((MarkupString)HighlightText(RenderMarkdown(articulo.ResumenArticulo)))
                                                            </span>
                                                        }
                                                        <details>
                                                            <summary>Ver texto completo</summary>
                                                            <span class="texto-articulo">
                                                                @((MarkupString)HighlightText(RenderMarkdown(articulo.TextoCompletoArticulo)))
                                                            </span>
                                                        </details>
                                                    }
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                            }
                        </div>
                    }
                }
            </div>
        }

       
        @if (filteredDisposiciones != null)
        {
            <h3>
                <button @onclick="@(() => ToggleVisibility("disposiciones"))">
                    @(IsVisible("disposiciones") ? "▼" : "►")
                </button>
                Disposiciones
            </h3>

            @if (IsVisible("disposiciones"))
            {
                @if (filteredDisposiciones.DisposicionesAdicionales?.Any() == true)
                {
                    <h4>
                        <button @onclick="@(() => ToggleVisibility("disposicionesAdicionales"))">
                            @(IsVisible("disposicionesAdicionales") ? "▼" : "►")
                        </button>
                        Disposiciones Adicionales
                    </h4>
                    @if (IsVisible("disposicionesAdicionales"))
                    {
                        @foreach (var disposicion in filteredDisposiciones.DisposicionesAdicionales)
                        {
                            <div class="disposicion">
                                
                                    <h5>@((MarkupString)HighlightText(disposicion.NombreDisposicion))</h5>
                                    @if (!string.IsNullOrEmpty(disposicion.ResumenDisposicion))
                                    {
                                        <span class="resumen resumen-disposicion">
                                            @((MarkupString)HighlightText(RenderMarkdown(disposicion.ResumenDisposicion)))
                                        </span>
                                    }
                                    <details>
                                        <summary>Ver texto completo</summary>
                                        <span class="resumen texto-disposicion">
                                            @((MarkupString)HighlightText(RenderMarkdown(disposicion.TextoCompletoDisposicion)))
                                        </span>
                                    </details>
                                
                            </div>
                        }
                    }
                }

                @if (filteredDisposiciones.DisposicionesTransitorias?.Any() == true)
                {
                    <h4>
                        <button @onclick="@(() => ToggleVisibility("disposicionesTransitorias"))">
                            @(IsVisible("disposicionesTransitorias") ? "▼" : "►")
                        </button>
                        Disposiciones Transitorias
                    </h4>
                    @if (IsVisible("disposicionesTransitorias"))
                    {
                        @foreach (var disposicion in filteredDisposiciones.DisposicionesTransitorias)
                        {
                            <div class="disposicion">
                               
                                    <h5>@((MarkupString)HighlightText(disposicion.NombreDisposicion))</h5>
                                    @if (!string.IsNullOrEmpty(disposicion.ResumenDisposicion))
                                    {
                                        <span class="resumen resumen-disposicion">
                                            @((MarkupString)HighlightText(RenderMarkdown(disposicion.ResumenDisposicion)))
                                        </span>
                                    }
                                    <details>
                                        <summary>Ver texto completo</summary>
                                        <span class="resumen texto-disposicion">
                                            @((MarkupString)HighlightText(RenderMarkdown(disposicion.TextoCompletoDisposicion)))
                                        </span>
                                    </details>
                                
                            </div>
                        }
                    }
                }

                @if (filteredDisposiciones.DisposicionesDerogatorias?.Any() == true)
                {
                    <h4>
                        <button @onclick="@(() => ToggleVisibility("disposicionesDerogatorias"))">
                            @(IsVisible("disposicionesDerogatorias") ? "▼" : "►")
                        </button>
                        Disposiciones Derogatorias
                    </h4>
                    @if (IsVisible("disposicionesDerogatorias"))
                    {
                        @foreach (var disposicion in filteredDisposiciones.DisposicionesDerogatorias)
                        {
                            <div class="disposicion">
                                <h5>@((MarkupString)HighlightText(disposicion.NombreDisposicion))</h5>
                                @if (!string.IsNullOrEmpty(disposicion.ResumenDisposicion))
                                {
                                    <span class="resumen resumen-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.ResumenDisposicion)))
                                    </span>
                                }
                                <details>
                                    <summary>Ver texto completo</summary>
                                    <span class="resumen texto-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.TextoCompletoDisposicion)))
                                    </span>
                                </details>
                            </div>
                        }
                    }
                }

                @if (filteredDisposiciones.DisposicionesFinales?.Any() == true)
                {
                    <h4>
                        <button @onclick="@(() => ToggleVisibility("disposicionesFinales"))">
                            @(IsVisible("disposicionesFinales") ? "▼" : "►")
                        </button>
                        Disposiciones Finales
                    </h4>
                    @if (IsVisible("disposicionesFinales"))
                    {
                        @foreach (var disposicion in filteredDisposiciones.DisposicionesFinales)
                        {
                            <div class="disposicion">
                                <h5>@((MarkupString)HighlightText(disposicion.NombreDisposicion))</h5>
                                @if (!string.IsNullOrEmpty(disposicion.ResumenDisposicion))
                                {
                                    <span class="resumen resumen-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.ResumenDisposicion)))
                                    </span>
                                }
                                <details>
                                    <summary>Ver texto completo</summary>
                                    <span class="resumen texto-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.TextoCompletoDisposicion)))
                                    </span>
                                </details>
                            </div>
                        }
                    }
                }
            }
        }

      
    </div>
}


<button id="scrollToTopBtn" title="Ir arriba">↑</button>

<script>
    window.initScrollToTopButton = function () {
        var scrollToTopBtn = document.getElementById("scrollToTopBtn");
        var rootElement = document.documentElement;

        function handleScroll() {
            var scrollTotal = rootElement.scrollHeight - rootElement.clientHeight;
            if ((rootElement.scrollTop / scrollTotal) > 0.1) {
                scrollToTopBtn.style.display = "block";
            } else {
                scrollToTopBtn.style.display = "none";
            }
        }

        function scrollToTop() {
            rootElement.scrollTo({
                top: 0,
                behavior: "smooth"
            });
        }

        scrollToTopBtn.addEventListener("click", scrollToTop);
        document.addEventListener("scroll", handleScroll);
    }
</script>

<script>
    window.copiarAlPortapapeles = function (texto) {
        navigator.clipboard.writeText(texto).then(function () {
            alert('Resumen copiado al portapapeles');
        }, function (err) {
            console.error('No se pudo copiar el texto: ', err);
        });
    }
</script>
@code {
    private bool mostrarResumenCaja = true;

    private bool isAccordionOpen = false;
    private Ley ley;
    private Dictionary<string, bool> visibilityState = new Dictionary<string, bool>();
    private string searchTerm = "";
    private List<Titulo> filteredTitulos = new List<Titulo>();
    private Disposiciones filteredDisposiciones;
    private List<FilterItem> filters = new List<FilterItem>();

    private string elementoSeleccionado = null;

     private bool mostrarLeyCompleta = false;
    private string contenidoLeyCompleta = "";

    private void MostrarLeyCompleta()
    {
        mostrarLeyCompleta = true;
        contenidoLeyCompleta = GenerarContenidoLeySinResumen();
        StateHasChanged();
    }

    private string GenerarContenidoLeySinResumen()
    {
        var contenido = new System.Text.StringBuilder();

        if (string.IsNullOrEmpty(elementoSeleccionado))
        {
            // Generar el contenido completo de la ley
            contenido.AppendLine($"# {ley.NombreLey}\n");

            if (ley.Preambulo != null && !string.IsNullOrEmpty(ley.Preambulo.TextoCompletoPreambulo))
            {
                contenido.AppendLine("## Preámbulo\n");
                contenido.AppendLine($"{ley.Preambulo.TextoCompletoPreambulo}\n");
            }

            foreach (var titulo in ley.Titulos)
            {
                GenerarContenidoTitulo(contenido, titulo);
            }

            if (ley.Disposiciones != null)
            {
                GenerarContenidoDisposiciones(contenido, ley.Disposiciones);
            }
        }
        else if (elementoSeleccionado.StartsWith("titulo-"))
        {
            Titulo titulo = ley.ObtenerTituloByTextoTitulo(elementoSeleccionado.Substring("titulo-".Length));
            GenerarContenidoTitulo(contenido, titulo);
        }
        else if (elementoSeleccionado.StartsWith("capitulo-"))
        {
            Capitulo capitulo = ley.ObtenerCapituloByNombreCapitulo(elementoSeleccionado.Substring("capitulo-".Length));
            GenerarContenidoCapitulo(contenido, capitulo);
        }
        else if (elementoSeleccionado.StartsWith("seccion-"))
        {
            Seccion seccion = ley.ObtenerSeccionByNombreSeccion(elementoSeleccionado.Substring("seccion-".Length));
            GenerarContenidoSeccion(contenido, seccion);
        }
        else if (elementoSeleccionado.StartsWith("articulo-"))
        {
            int numeroArticulo = int.Parse(elementoSeleccionado.Substring("articulo-".Length));
            Articulo articulo = ley.ObtenerArticuloByNumero(numeroArticulo);
            GenerarContenidoArticulo(contenido, articulo);
        }
        else if (elementoSeleccionado == "disposiciones")
        {
            GenerarContenidoDisposiciones(contenido, ley.Disposiciones);
        }
        else if (elementoSeleccionado == "disposicionesAdicionales")
        {
            GenerarContenidoDisposicionesAdicionales(contenido, ley.Disposiciones.DisposicionesAdicionales);
        }
        else if (elementoSeleccionado == "disposicionesTransitorias")
        {
            GenerarContenidoDisposicionesTransitorias(contenido, ley.Disposiciones.DisposicionesTransitorias);
        }
        else if (elementoSeleccionado == "disposicionesDerogatorias")
        {
            GenerarContenidoDisposicionesDerogatorias(contenido, ley.Disposiciones.DisposicionesDerogatorias);
        }
        else if (elementoSeleccionado == "disposicionesFinales")
        {
            GenerarContenidoDisposicionesFinales(contenido, ley.Disposiciones.DisposicionesFinales);
        }

        // Reemplazar múltiples saltos de línea por uno solo
        string contenidoFinal = contenido.ToString().Replace("\n\n", "\n");
        contenidoFinal = contenidoFinal.ToString().Replace("\n\n", "\n");
        contenidoFinal = contenidoFinal.ToString().Replace("\n\n", "\n");
        return contenidoFinal;
    }

    // Métodos auxiliares para generar el contenido

    private void GenerarContenidoTitulo(StringBuilder contenido, Titulo titulo)
    {
        contenido.AppendLine($"## {titulo.NombreTitulo}\n");

        foreach (var articulo in titulo.Articulos)
        {
            GenerarContenidoArticulo(contenido, articulo);
        }

        foreach (var capitulo in titulo.Capitulos)
        {
            GenerarContenidoCapitulo(contenido, capitulo);
        }
    }

    private void GenerarContenidoCapitulo(StringBuilder contenido, Capitulo capitulo)
    {
        contenido.AppendLine($"### {capitulo.NombreCapitulo}\n");

        foreach (var articulo in capitulo.Articulos)
        {
            GenerarContenidoArticulo(contenido, articulo);
        }

        foreach (var seccion in capitulo.Secciones)
        {
            GenerarContenidoSeccion(contenido, seccion);
        }
    }

    private void GenerarContenidoSeccion(StringBuilder contenido, Seccion seccion)
    {
        contenido.AppendLine($"#### {seccion.NombreSeccion}\n");

        foreach (var articulo in seccion.Articulos)
        {
            GenerarContenidoArticulo(contenido, articulo);
        }
    }

    private void GenerarContenidoArticulo(StringBuilder contenido, Articulo articulo)
    {
        //contenido.AppendLine($"##### Artículo {articulo.NumeroArticulo}: {articulo.NombreArticulo}\n");
        contenido.AppendLine($" \n");
        contenido.AppendLine($"{articulo.TextoCompletoArticulo}\n");
        contenido.AppendLine($" \n");
    }

    private void GenerarContenidoDisposiciones(StringBuilder contenido, Disposiciones disposiciones)
    {
        contenido.AppendLine("## Disposiciones\n");

        if (disposiciones.DisposicionesAdicionales?.Any() == true)
        {
            GenerarContenidoDisposicionesAdicionales(contenido, disposiciones.DisposicionesAdicionales);
        }

        if (disposiciones.DisposicionesTransitorias?.Any() == true)
        {
            GenerarContenidoDisposicionesTransitorias(contenido, disposiciones.DisposicionesTransitorias);
        }

        if (disposiciones.DisposicionesDerogatorias?.Any() == true)
        {
            GenerarContenidoDisposicionesDerogatorias(contenido, disposiciones.DisposicionesDerogatorias);
        }

        if (disposiciones.DisposicionesFinales?.Any() == true)
        {
            GenerarContenidoDisposicionesFinales(contenido, disposiciones.DisposicionesFinales);
        }
    }

    private void GenerarContenidoDisposicionesAdicionales(StringBuilder contenido, List<Disposicion> disposiciones)
    {
        contenido.AppendLine("### Disposiciones Adicionales\n");

        foreach (var disposicion in disposiciones)
        {
            GenerarContenidoDisposicion(contenido, disposicion);
        }
    }

    private void GenerarContenidoDisposicionesTransitorias(StringBuilder contenido, List<Disposicion> disposiciones)
    {
        contenido.AppendLine("### Disposiciones Transitorias\n");

        foreach (var disposicion in disposiciones)
        {
            GenerarContenidoDisposicion(contenido, disposicion);
        }
    }

    private void GenerarContenidoDisposicionesDerogatorias(StringBuilder contenido, List<Disposicion> disposiciones)
    {
        contenido.AppendLine("### Disposiciones Derogatorias\n");

        foreach (var disposicion in disposiciones)
        {
            GenerarContenidoDisposicion(contenido, disposicion);
        }
    }

    private void GenerarContenidoDisposicionesFinales(StringBuilder contenido, List<Disposicion> disposiciones)
    {
        contenido.AppendLine("### Disposiciones Finales\n");

        foreach (var disposicion in disposiciones)
        {
            GenerarContenidoDisposicion(contenido, disposicion);
        }
    }

    private void GenerarContenidoDisposicion(StringBuilder contenido, Disposicion disposicion)
    {
        contenido.AppendLine($"#### {disposicion.NombreDisposicion}\n");
        contenido.AppendLine($"{disposicion.TextoCompletoDisposicion}\n");
    }

    private void ToggleAccordion()
    {
        isAccordionOpen = !isAccordionOpen;
        StateHasChanged();
    }

    private async Task UpdateFilterAndApply(FilterItem item, bool isChecked)
    {
        item.IsSelected = isChecked;
        await InvokeAsync(StateHasChanged);
        ApplyFilters();
    }

    private async Task CopiarResumen()
    {
        string textoPlano = System.Text.RegularExpressions.Regex.Replace(resumenLey, "<.*?>", String.Empty);
        await JSRuntime.InvokeVoidAsync("copiarAlPortapapeles", textoPlano);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initScrollToTopButton");
        }
    }

    private class LeyInfo
    {
        public string Titulo { get; set; }
        public string NombreArchivo { get; set; }
        public string Clave { get; set; }
    }

    private List<LeyInfo> leyesPreexistentes = new List<LeyInfo>
    {
        new LeyInfo { Titulo = "Constitución española", NombreArchivo = "Constitucion_espanola.json", Clave = "constitucion" },
    new LeyInfo { Titulo = "Trebep", NombreArchivo = "trebep.json", Clave = "trebep" },
    new LeyInfo { Titulo = "Ley 39/2025", NombreArchivo = "Ley_39.json", Clave = "ley39" },
new LeyInfo { Titulo = "Ley 40/2025", NombreArchivo = "Ley_40.json", Clave = "ley40" },
new LeyInfo { Titulo = "Ley de igualdad", NombreArchivo = "Ley_igualdad.json", Clave = "leyIgualdad" },
new LeyInfo { Titulo = "Ley de transparencia", NombreArchivo = "Ley_transparencia.json", Clave = "leyTransparencia" },
new LeyInfo { Titulo = "Ley de prevención", NombreArchivo = "Ley_prevencion.json", Clave = "leyPrevencion" },
new LeyInfo { Titulo = "Lopdgdd", NombreArchivo = "Lopdgdd.json", Clave = "leyProteccionDatos" },
new LeyInfo { Titulo = "Rgpd", NombreArchivo = "Rgpd.json", Clave = "ReglamentoProteccionDatos" },
new LeyInfo { Titulo = "eIdas", NombreArchivo = "Eidas.json", Clave = "EIDAS" },

new LeyInfo { Titulo = "Ley de haciendas locales", NombreArchivo = "Ley_haciendas_locales.json", Clave = "leyHacienda" },
        // Añade aquí más leyes según sea necesario
    };


    protected override void OnInitialized()
    {

        Ley ley1 = new Ley
            {
                Preambulo = new Preambulo
                {
                    ResumenPreambulo="",
                    TextoCompletoPreambulo=""
                },
                NombreLey = "",
                Titulos= new List<Titulo>()
                {
                    new Titulo
                    {
Articulos= new List<Articulo>
                            {
                               new Articulo
                               {
                                   NombreArticulo="",
                                    NombreArticuloOriginal=true,
                                    NumeroArticulo=1,
                                    ResumenArticulo="",
                                    TextoCompletoArticulo=""
                               }
                            },
                        NombreTitulo="",
                        ResumenTitulo="",
                        Capitulos= new List<Capitulo>
                        {
                            new Capitulo
                            {

                                NombreCapitulo="",
                                ResumenCapitulo="",
                            Articulos= new List<Articulo>
                            {
                               new Articulo
                               {
                                   NombreArticulo="",
                                    NombreArticuloOriginal=true,
                                    NumeroArticulo=1,
                                    ResumenArticulo="",
                                    TextoCompletoArticulo=""
                               }
                            },
                            Secciones= new List<Seccion>
                            {
                                new Seccion
                                {
                                    NombreSeccion="",
                                    ResumenSeccion="",
                                    Articulos= new List<Articulo>
                                    {
                                        new Articulo
                               {
                                   NombreArticulo="",
                                    NombreArticuloOriginal=true,
                                    NumeroArticulo=1,
                                    ResumenArticulo="",
                                    TextoCompletoArticulo=""
                               }
                                    }
                                }

                            }
                            }
                        }

                    }
                },
                Disposiciones = new Disposiciones
                {
                    DisposicionesAdicionales = new List<Disposicion>
                {
                    new Disposicion
                    {
                        NombreDisposicion = "",
                        ResumenDisposicion = "",
                        TextoCompletoDisposicion = ""
                    }
                },
                    DisposicionesTransitorias = new List<Disposicion>
                {
                    new Disposicion
                    {
                        NombreDisposicion = "",
                        ResumenDisposicion = "",
                        TextoCompletoDisposicion = ""
                    }
                },
                    DisposicionesDerogatorias = new List<Disposicion>
                    {


                    new Disposicion
                    {
                        NombreDisposicion = "",
                        ResumenDisposicion = "",
                        TextoCompletoDisposicion = ""
                    }

                    },
                    DisposicionesFinales = new List<Disposicion>
                    {

                        new Disposicion
                    {
                        NombreDisposicion = "",
                        ResumenDisposicion = "",
                        TextoCompletoDisposicion = ""
                    }

                    }
                }
            };

        // Configurar las opciones de serialización
        JsonSerializerOptions options1 = new JsonSerializerOptions
            {
                WriteIndented = true,
                PropertyNamingPolicy = null
            };

        // Serializar la instancia de Ley a JSON
        string jsonString = JsonSerializer.Serialize(ley1, options1);
        Ley ley2 = JsonSerializer.Deserialize<Ley>(jsonString,options1);
        base.OnInitialized();
        Search();
    }

    private async Task CargarLeyPreexistente(ChangeEventArgs e)
    {
        var clave = e.Value.ToString();
        if (!string.IsNullOrEmpty(clave))
        {
            var leySeleccionada = leyesPreexistentes.FirstOrDefault(l => l.Clave == clave);
            if (leySeleccionada != null)
            {
                try
                {
                    var response = await HttpClient.GetStringAsync($"Leyes/{leySeleccionada.NombreArchivo}");
                    var options = new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true,
                            PropertyNamingPolicy = null,
                            WriteIndented = true
                        };
                    ley = JsonSerializer.Deserialize<Ley>(response, options);
                    InitializeVisibilityState();
                    GenerateFilters(); // Añadir esta línea
                    ApplyFilters(); // Añadir esta línea
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar la ley preexistente: {ex.Message}");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Ley no encontrada");
            }
        }
        Search();
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            var jsonContent = System.Text.Encoding.UTF8.GetString(buffer);
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    PropertyNamingPolicy = null,
                    WriteIndented = true
                };
            ley = JsonSerializer.Deserialize<Ley>(jsonContent,options);
            InitializeVisibilityState();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar el archivo: {ex.Message}");
        }
        Search();
    }
    private void ClearSearch()
    {
        searchTerm = "";
        Search();
    }
    private void Search()
    {
        if (ley == null)
        {
            filteredTitulos = new List<Titulo>();
            filteredDisposiciones = new Disposiciones();
            return;
        }

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredTitulos = ley.Titulos;
            filteredDisposiciones = ley.Disposiciones;
        }
        else
        {
            filteredTitulos = ley.Titulos
                .Where(t => ContainsSearchTerm(t))
                .ToList();

            filteredDisposiciones = new Disposiciones
                {
                    DisposicionesAdicionales = ley.Disposiciones?.DisposicionesAdicionales?.Where(ContainsSearchTerm).ToList() ?? new List<Disposicion>(),
                    DisposicionesTransitorias = ley.Disposiciones?.DisposicionesTransitorias?.Where(ContainsSearchTerm).ToList() ?? new List<Disposicion>(),
                    DisposicionesDerogatorias = ley.Disposiciones?.DisposicionesDerogatorias?.Where(ContainsSearchTerm).ToList() ?? new List<Disposicion>(),
                    DisposicionesFinales = ley.Disposiciones?.DisposicionesFinales?.Where(ContainsSearchTerm).ToList() ?? new List<Disposicion>()
                };
        }

        UpdateDisposicionesVisibility();
        StateHasChanged();
    }

    private void UpdateDisposicionesVisibility()
    {
        visibilityState["disposiciones"] =
            (filteredDisposiciones.DisposicionesAdicionales?.Any() ?? false) ||
            (filteredDisposiciones.DisposicionesTransitorias?.Any() ?? false) ||
            (filteredDisposiciones.DisposicionesDerogatorias?.Any() ?? false) ||
            (filteredDisposiciones.DisposicionesFinales?.Any() ?? false);
    }
    private bool ContainsSearchTerm(Titulo titulo)
    {
        return ContainsSearchTermIgnoreCase(titulo.NombreTitulo) ||
               ContainsSearchTermIgnoreCase(titulo.ResumenTitulo) ||
               titulo.Articulos.Any(ContainsSearchTerm) ||
               titulo.Capitulos.Any(ContainsSearchTerm);
    }

    private bool ContainsSearchTerm(Capitulo capitulo)
    {
        return ContainsSearchTermIgnoreCase(capitulo.NombreCapitulo) ||
               ContainsSearchTermIgnoreCase(capitulo.ResumenCapitulo) ||
               capitulo.Articulos.Any(ContainsSearchTerm) ||
               capitulo.Secciones.Any(ContainsSearchTerm);
    }

    private bool ContainsSearchTerm(Seccion seccion)
    {
        return ContainsSearchTermIgnoreCase(seccion.NombreSeccion) ||
               ContainsSearchTermIgnoreCase(seccion.ResumenSeccion) ||
               seccion.Articulos.Any(ContainsSearchTerm);
    }

    private bool ContainsSearchTerm(Articulo articulo)
    {
        return ContainsSearchTermIgnoreCase(articulo.NombreArticulo) ||
               ContainsSearchTermIgnoreCase(articulo.ResumenArticulo) ||
               ContainsSearchTermIgnoreCase(articulo.TextoCompletoArticulo);
    }

    private bool ContainsSearchTerm(Disposicion disposicion)
    {
        return ContainsSearchTermIgnoreCase(disposicion.NombreDisposicion) ||
               ContainsSearchTermIgnoreCase(disposicion.ResumenDisposicion) ||
               ContainsSearchTermIgnoreCase(disposicion.TextoCompletoDisposicion);
    }
    private bool ContainsSearchTermIgnoreCase(string text)
    {
        var textoSinAcentos = RemoveAccents(text);
        var searchTermSinAcentos = RemoveAccents(searchTerm);
        return !string.IsNullOrEmpty(textoSinAcentos) && textoSinAcentos.IndexOf(searchTermSinAcentos, StringComparison.OrdinalIgnoreCase) >= 0;
    }

    private string RemoveAccents(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        string[] accentedVowels = { "á", "é", "í", "ó", "ú", "ü", "Á", "É", "Í", "Ó", "Ú", "Ü" };
        string[] unaccentedVowels = { "a", "e", "i", "o", "u", "u", "A", "E", "I", "O", "U", "U" };

        for (int i = 0; i < accentedVowels.Length; i++)
        {
            input = input.Replace(accentedVowels[i], unaccentedVowels[i]);
        }

        return input;
    }

    private void InitializeVisibilityState()
    {
        visibilityState.Clear();
        visibilityState["disposiciones"] = false;
        visibilityState["disposicionesAdicionales"] = false;
        visibilityState["disposicionesTransitorias"] = false;
        visibilityState["disposicionesDerogatorias"] = false;
        visibilityState["disposicionesFinales"] = false;

        if (ley != null)
        {
            foreach (var titulo in filteredTitulos)
            {
                visibilityState[$"titulo-{titulo.NombreTitulo}"] = false;
                foreach (var capitulo in titulo.Capitulos)
                {
                    visibilityState[$"capitulo-{capitulo.NombreCapitulo}"] = false;
                    foreach (var seccion in capitulo.Secciones)
                    {
                        visibilityState[$"seccion-{seccion.NombreSeccion}"] = false;
                        foreach (var articulo in seccion.Articulos)
                        {
                            visibilityState[$"articulo-{articulo.NumeroArticulo}"] = false;
                        }
                    }
                    foreach (var articulo in capitulo.Articulos)
                    {
                        visibilityState[$"articulo-{articulo.NumeroArticulo}"] = false;
                    }
                }
                foreach (var articulo in titulo.Articulos)
                {
                    visibilityState[$"articulo-{articulo.NumeroArticulo}"] = false;
                }
            }
        }
    }
    private void ToggleVisibility(string key)
    {
        if (visibilityState.ContainsKey(key))
        {
            visibilityState[key] = !visibilityState[key];
            elementoSeleccionado = visibilityState[key] ? key : null;
        }
        else
        {
            visibilityState[key] = true;
            elementoSeleccionado = key;
        }
        StateHasChanged();
    }

    private bool IsVisible(string key)
    {
        return visibilityState.ContainsKey(key) && visibilityState[key];
    }

    private string RenderMarkdown(string markdown)
    {
        if (string.IsNullOrEmpty(markdown))
            return string.Empty;

        markdown = markdown.Replace("\\n", "\n");

        var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseSoftlineBreakAsHardlineBreak()
            .Build();

        return Markdown.ToHtml(markdown, pipeline);
    }

    private string HighlightText(string text)
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            return text;
        }
        var searchTermSinAcentos=RemoveAccents(searchTerm);
        var textSinAcentos = RemoveAccents(text);
        var regex = new System.Text.RegularExpressions.Regex(searchTermSinAcentos, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        return regex.Replace(textSinAcentos, match => $"<span class=\"highlight\">{match.Value}</span>");
    }



    private bool mostrarResumen = false;
    private string resumenLey = "";

    private void MostrarResumenLey()
    {
        mostrarResumen = true;
        resumenLey = GenerarResumenLey();
        StateHasChanged();
    }

    private string GenerarResumenLey()
    {
        var resumen = new System.Text.StringBuilder();

        if (string.IsNullOrEmpty(elementoSeleccionado))
        {
            // Generar resumen completo de la ley
            resumen.AppendLine($"# {ley.NombreLey}\n");

            if (ley.Preambulo != null && !string.IsNullOrEmpty(ley.Preambulo.ResumenPreambulo))
            {
                resumen.AppendLine("## Preámbulo\n");
                resumen.AppendLine($"{ley.Preambulo.ResumenPreambulo}\n");
            }

            foreach (var titulo in ley.Titulos)
            {
                GenerarResumenTitulo(resumen, titulo);
            }

            if (ley.Disposiciones != null)
            {
                resumen.AppendLine("## Disposiciones\n");

                if (ley.Disposiciones.DisposicionesAdicionales?.Any() == true)
                {
                    resumen.AppendLine("### Disposiciones Adicionales\n");
                    foreach (var disposicion in ley.Disposiciones.DisposicionesAdicionales)
                    {
                        AgregarResumenDisposicion(resumen, disposicion);
                    }
                }

                if (ley.Disposiciones.DisposicionesTransitorias?.Any() == true)
                {
                    resumen.AppendLine("### Disposiciones Transitorias\n");
                    foreach (var disposicion in ley.Disposiciones.DisposicionesTransitorias)
                    {
                        AgregarResumenDisposicion(resumen, disposicion);
                    }
                }

                if (ley.Disposiciones.DisposicionesDerogatorias?.Any() == true)
                {
                    resumen.AppendLine("### Disposiciones Derogatorias\n");
                    foreach (var disposicion in ley.Disposiciones.DisposicionesDerogatorias)
                    {
                        AgregarResumenDisposicion(resumen, disposicion);
                    }
                }

                if (ley.Disposiciones.DisposicionesFinales?.Any() == true)
                {
                    resumen.AppendLine("### Disposiciones Finales\n");
                    foreach (var disposicion in ley.Disposiciones.DisposicionesFinales)
                    {
                        AgregarResumenDisposicion(resumen, disposicion);
                    }
                }
            }
        }
        else if (elementoSeleccionado.StartsWith("titulo-"))
        {
            // Código existente para el resumen del título
            Titulo titulo = ley.ObtenerTituloByTextoTitulo(elementoSeleccionado.Substring("titulo-".Length));
            GenerarResumenTitulo(resumen, titulo);
        }
        else if (elementoSeleccionado.StartsWith("capitulo-"))
        {
            Capitulo capitulo = ley.ObtenerCapituloByNombreCapitulo(elementoSeleccionado.Substring("capitulo-".Length));
            GenerarResumenCapitulo(resumen, capitulo);
            // Código existente para el resumen del capítulo
        }
        // Mantener el resto del código existente para otros casos
        // Antes de retornar, reemplazar dos saltos de línea por uno solo
        string resumenFinal = resumen.ToString().Replace("\n\n", "\n");
        resumenFinal = resumenFinal.ToString().Replace("\n\n", "\n");
        resumenFinal = resumenFinal.ToString().Replace("\n\n", "\n");
        return RenderMarkdown(resumenFinal.ToString());
    }

    private void AgregarResumenDisposicion(System.Text.StringBuilder resumen, Disposicion disposicion)
    {
        resumen.AppendLine($"#### {disposicion.NombreDisposicion}\n");
        if (!string.IsNullOrEmpty(disposicion.ResumenDisposicion))
        {
            resumen.AppendLine($"{disposicion.ResumenDisposicion}\n");
        }
    }

    private void GenerarResumenTitulo(System.Text.StringBuilder resumen, Titulo titulo)
    {
        resumen.AppendLine($"## {titulo.NombreTitulo}\n");
        if (!string.IsNullOrEmpty(titulo.ResumenTitulo))
        {
            resumen.AppendLine($"{titulo.ResumenTitulo}\n");
        }

        foreach (var articulo in titulo.Articulos)
        {
            AgregarResumenArticulo(resumen, articulo);
        }

        foreach (var capitulo in titulo.Capitulos)
        {
            GenerarResumenCapitulo(resumen, capitulo);
        }
    }

    private void GenerarResumenCapitulo(System.Text.StringBuilder resumen, Capitulo capitulo)
    {
        resumen.AppendLine($"### {capitulo.NombreCapitulo}\n");
        if (!string.IsNullOrEmpty(capitulo.ResumenCapitulo))
        {
            resumen.AppendLine($"{capitulo.ResumenCapitulo}\n");
        }

        foreach (var articulo in capitulo.Articulos)
        {
            AgregarResumenArticulo(resumen, articulo);
        }

        foreach (var seccion in capitulo.Secciones)
        {
            GenerarResumenSeccion(resumen, seccion);
        }
    }

    private void GenerarResumenSeccion(System.Text.StringBuilder resumen, Seccion seccion)
    {
        resumen.AppendLine($"#### {seccion.NombreSeccion}\n");
        if (!string.IsNullOrEmpty(seccion.ResumenSeccion))
        {
            resumen.AppendLine($"{seccion.ResumenSeccion}\n");
        }

        foreach (var articulo in seccion.Articulos)
        {
            AgregarResumenArticulo(resumen, articulo);
        }
    }

    private void AgregarResumenArticulo(System.Text.StringBuilder resumen, Articulo articulo)
    {
        resumen.AppendLine($"##### Artículo {articulo.NumeroArticulo}: {articulo.NombreArticulo}\n");
        if (!string.IsNullOrEmpty(articulo.ResumenArticulo))
        {
            resumen.AppendLine($"{articulo.ResumenArticulo}\n");
        }
    }



    private void GenerateFilters()
    {
        filters.Clear();
        if (ley != null)
        {
            foreach (var titulo in ley.Titulos)
            {
                var tituloFilter = new FilterItem { Id = $"titulo-{titulo.NombreTitulo}", Name = titulo.NombreTitulo };
                foreach (var capitulo in titulo.Capitulos)
                {
                    var capituloFilter = new FilterItem { Id = $"capitulo-{capitulo.NombreCapitulo}", Name = capitulo.NombreCapitulo };
                    foreach (var seccion in capitulo.Secciones)
                    {
                        capituloFilter.Children.Add(new FilterItem { Id = $"seccion-{seccion.NombreSeccion}", Name = seccion.NombreSeccion });
                    }
                    tituloFilter.Children.Add(capituloFilter);
                }
                filters.Add(tituloFilter);
            }
        }
    }

    private void ApplyFilters()
    {
        if (ley == null) return;

        var selectedFilters = GetSelectedFilters(filters);

        filteredTitulos = ley.Titulos.Select(t => new Titulo
            {
                NombreTitulo = t.NombreTitulo,
                ResumenTitulo = t.ResumenTitulo,
                Capitulos = t.Capitulos.Select(c => new Capitulo
                {
                    NombreCapitulo = c.NombreCapitulo,
                    ResumenCapitulo = c.ResumenCapitulo,
                    Secciones = c.Secciones.Select(s => new Seccion
                    {
                        NombreSeccion = s.NombreSeccion,
                        ResumenSeccion = s.ResumenSeccion,
                        Articulos = s.Articulos
                    }).ToList(),
                    Articulos = c.Articulos
                }).ToList(),
                Articulos = t.Articulos
            }).ToList();

        if (selectedFilters.Any())
        {
            filteredTitulos = filteredTitulos.Where(t =>
                selectedFilters.Contains($"titulo-{t.NombreTitulo}") ||
                t.Capitulos.Any(c =>
                    selectedFilters.Contains($"capitulo-{c.NombreCapitulo}") ||
                    c.Secciones.Any(s => selectedFilters.Contains($"seccion-{s.NombreSeccion}"))
                )
            ).ToList();

            foreach (var titulo in filteredTitulos)
            {
                titulo.Capitulos = titulo.Capitulos.Where(c =>
                    selectedFilters.Contains($"titulo-{titulo.NombreTitulo}") ||
                    selectedFilters.Contains($"capitulo-{c.NombreCapitulo}") ||
                    c.Secciones.Any(s => selectedFilters.Contains($"seccion-{s.NombreSeccion}"))
                ).ToList();

                foreach (var capitulo in titulo.Capitulos)
                {
                    capitulo.Secciones = capitulo.Secciones.Where(s =>
                        selectedFilters.Contains($"titulo-{titulo.NombreTitulo}") ||
                        selectedFilters.Contains($"capitulo-{capitulo.NombreCapitulo}") ||
                        selectedFilters.Contains($"seccion-{s.NombreSeccion}")
                    ).ToList();
                }
            }
        }

        StateHasChanged();
    }

    private List<string> GetSelectedFilters(List<FilterItem> items)
    {
        var selectedFilters = new List<string>();
        foreach (var item in items)
        {
            if (item.IsSelected)
            {
                selectedFilters.Add(item.Id);
            }
            selectedFilters.AddRange(GetSelectedFilters(item.Children));
        }
        return selectedFilters;
    }

    private void ReiniciarEstado()
    {
        ley = null;
        mostrarResumen = false;
        mostrarLeyCompleta = false;
        searchTerm = "";
        filteredTitulos = new List<Titulo>();
        filteredDisposiciones = new Disposiciones();
        visibilityState.Clear();
        elementoSeleccionado = null;
        filters.Clear();
        isAccordionOpen = false;
        // Si tienes más variables de estado, reinícialas aquí

        StateHasChanged();
    }

    private void ToggleResumenCaja()
    {
        mostrarResumenCaja = !mostrarResumenCaja;
    }


}

<style>
   
</style>