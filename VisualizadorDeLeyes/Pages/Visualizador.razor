@page "/visualizador"
@using System.Text.Json;
@using VisualizadorDeLeyes.Entidades
@using System.IO;
@using Markdig;
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<style>
    

    body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f0f0f0;
        margin: 0;
        padding: 20px;
    }

    .contenido-ley {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .resumen-titulo, .resumen-seccion, .resumen-capitulo {
        outline: 2px solid #4a90e2;
        background-color: #e6f2ff;
        display: block;
        width: fit-content;
        padding: 0.5em;
        margin-bottom: 1em;
        border-radius: 4px;
    }

    .resumen-articulo,.resumen-disposicion {
        outline: 2px solid #6b8e23;
        background-color: #f0fff0;
        display: block;
        width: fit-content;
        padding: 0.5em;
        margin-bottom: 1em;
        border-radius: 4px;
    }

    .texto-articulo,.texto-disposicion {
        background-color: #f9f9f9;
        border: 1px solid #e0e0e0;
        padding: 1em;
        margin-bottom: 1.5em;
        border-radius: 4px;
        display: block;
        width: fit-content;
    }

    h1, h2, h3 {
        color: #2c3e50;
    }

    h6 {
        color: #d35400;
        margin-bottom: 0.5em;
    }

    .search-container {
        margin-bottom: 20px;
        margin-top: 20px;
    }

    .search-input {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .highlight {
        background-color: yellow;
        font-weight: bold;
    }
</style>
<h1>Visor de Leyes</h1>

<div>
    <h3>Seleccionar ley preexistente:</h3>
    <select @onchange="CargarLeyPreexistente">
        <option value="">Seleccione una ley</option>
        @foreach (var leyInfo in leyesPreexistentes)
        {
            <option value="@leyInfo.NombreArchivo">@leyInfo.Titulo</option>
        }
    </select>
</div>

<div>
    <h3>O cargar una nueva ley:</h3>
    <InputFile OnChange="@LoadFile" accept=".json" />
</div>

@if (ley == null)
{
    <p>Seleccione una ley preexistente o cargue un archivo JSON para visualizar la ley.</p>
}
else
{
    <div class="search-container">
        <input type="text" class="search-input" placeholder="Buscar en la ley..." @bind="searchTerm" @bind:event="oninput" @onkeyup="Search" />
    </div>

    <div class="contenido-ley">
        <h2>@ley.NombreLey</h2>

        @if (!string.IsNullOrEmpty(ley.ResumenLey))
        {
            <h3>Resumen de la Ley</h3>
            @((MarkupString)HighlightText(RenderMarkdown(ley.ResumenLey)))
        }

        @if (ley.Preambulo != null)
        {
            <h3>Preámbulo</h3>
            @((MarkupString)HighlightText(RenderMarkdown(ley.Preambulo.ResumenPreambulo)))
        }

        @foreach (var titulo in filteredTitulos)
        {
            <div class="titulo">
                <h3>
                    <button @onclick="@(() => ToggleVisibility($"titulo-{titulo.NombreTitulo}"))">
                        @(IsVisible($"titulo-{titulo.NombreTitulo}") ? "▼" : "►")
                    </button>
                    @((MarkupString)HighlightText(titulo.NombreTitulo))
                </h3>
                @if (IsVisible($"titulo-{titulo.NombreTitulo}"))
                {
                    @if (!string.IsNullOrEmpty(titulo.ResumenTitulo))
                    {
                        <span class="resumen resumen-titulo">
                            @((MarkupString)HighlightText(RenderMarkdown(titulo.ResumenTitulo)))
                        </span>
                    }
                    @foreach (var articulo in titulo.Articulos.Where(a => ContainsSearchTerm(a)))
                    {
                        <div class="articulo">
                            <h6>
                                <button @onclick="@(() => ToggleVisibility($"articulo-{articulo.NumeroArticulo}"))">
                                    @(IsVisible($"articulo-{articulo.NumeroArticulo}") ? "▼" : "►")
                                </button>
                                Artículo @articulo.NumeroArticulo: @((MarkupString)HighlightText(articulo.NombreArticulo))
                            </h6>
                            @if (IsVisible($"articulo-{articulo.NumeroArticulo}"))
                            {
                                @if (!string.IsNullOrEmpty(articulo.ResumenArticulo))
                                {
                                    <span class="resumen resumen-articulo">
                                        @((MarkupString)HighlightText(RenderMarkdown(articulo.ResumenArticulo)))
                                    </span>
                                }
                                <details>
                                    <summary>Ver texto completo</summary>
                                    <span class="texto-articulo">
                                        @((MarkupString)HighlightText(RenderMarkdown(articulo.TextoCompletoArticulo)))
                                    </span>
                                </details>
                            }
                        </div>
                    }
                    @foreach (var capitulo in titulo.Capitulos.Where(c => ContainsSearchTerm(c)))
                    {
                        <div class="capitulo">
                            <h4>
                                <button @onclick="@(() => ToggleVisibility($"capitulo-{capitulo.NombreCapitulo}"))">
                                    @(IsVisible($"capitulo-{capitulo.NombreCapitulo}") ? "▼" : "►")
                                </button>
                                @((MarkupString)HighlightText(capitulo.NombreCapitulo))
                            </h4>
                            @if (IsVisible($"capitulo-{capitulo.NombreCapitulo}"))
                            {
                                @if (!string.IsNullOrEmpty(capitulo.ResumenCapitulo))
                                {
                                    <span class="resumen resumen-capitulo">
                                        @((MarkupString)HighlightText(RenderMarkdown(capitulo.ResumenCapitulo)))
                                    </span>
                                }
                                @foreach (var articulo in capitulo.Articulos.Where(a => ContainsSearchTerm(a)))
                                {
                                    <div class="articulo">
                                        <h6>
                                            <button @onclick="@(() => ToggleVisibility($"articulo-{articulo.NumeroArticulo}"))">
                                                @(IsVisible($"articulo-{articulo.NumeroArticulo}") ? "▼" : "►")
                                            </button>
                                            Artículo @articulo.NumeroArticulo: @((MarkupString)HighlightText(articulo.NombreArticulo))
                                        </h6>
                                        @if (IsVisible($"articulo-{articulo.NumeroArticulo}"))
                                        {
                                            @if (!string.IsNullOrEmpty(articulo.ResumenArticulo))
                                            {
                                                <span class="resumen resumen-articulo">
                                                    @((MarkupString)HighlightText(RenderMarkdown(articulo.ResumenArticulo)))
                                                </span>
                                            }
                                            <details>
                                                <summary>Ver texto completo</summary>
                                                <span class="texto-articulo">
                                                    @((MarkupString)HighlightText(RenderMarkdown(articulo.TextoCompletoArticulo)))
                                                </span>
                                            </details>
                                        }
                                    </div>
                                }
                                @foreach (var seccion in capitulo.Secciones.Where(s => ContainsSearchTerm(s)))
                                {
                                    <div class="seccion">
                                        <h5>
                                            <button @onclick="@(() => ToggleVisibility($"seccion-{seccion.NombreSeccion}"))">
                                                @(IsVisible($"seccion-{seccion.NombreSeccion}") ? "▼" : "►")
                                            </button>
                                            @((MarkupString)HighlightText(seccion.NombreSeccion))
                                        </h5>
                                        @if (IsVisible($"seccion-{seccion.NombreSeccion}"))
                                        {
                                            @if (!string.IsNullOrEmpty(seccion.ResumenSeccion))
                                            {
                                                <span class="resumen resumen-seccion">
                                                    @((MarkupString)HighlightText(RenderMarkdown(seccion.ResumenSeccion)))
                                                </span>
                                            }

                                            @foreach (var articulo in seccion.Articulos.Where(a => ContainsSearchTerm(a)))
                                            {
                                                <div class="articulo">
                                                    <h6>
                                                        <button @onclick="@(() => ToggleVisibility($"articulo-{articulo.NumeroArticulo}"))">
                                                            @(IsVisible($"articulo-{articulo.NumeroArticulo}") ? "▼" : "►")
                                                        </button>
                                                        Artículo @articulo.NumeroArticulo: @((MarkupString)HighlightText(articulo.NombreArticulo))
                                                    </h6>
                                                    @if (IsVisible($"articulo-{articulo.NumeroArticulo}"))
                                                    {
                                                        @if (!string.IsNullOrEmpty(articulo.ResumenArticulo))
                                                        {
                                                            <span class="resumen resumen-articulo">
                                                                @((MarkupString)HighlightText(RenderMarkdown(articulo.ResumenArticulo)))
                                                            </span>
                                                        }
                                                        <details>
                                                            <summary>Ver texto completo</summary>
                                                            <span class="texto-articulo">
                                                                @((MarkupString)HighlightText(RenderMarkdown(articulo.TextoCompletoArticulo)))
                                                            </span>
                                                        </details>
                                                    }
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                            }
                        </div>
                    }
                }
            </div>
        }

        @if (ley.Disposiciones != null)
        {
            <h3>
                <button @onclick="@(() => ToggleVisibility("disposiciones"))">
                    @(IsVisible("disposiciones") ? "▼" : "►")
                </button>
                Disposiciones
            </h3>

            @if (IsVisible("disposiciones"))
            {
                @if (ley.Disposiciones.DisposicionesAdicionales.Any())
                {
                    <h4>
                        <button @onclick="@(() => ToggleVisibility("disposicionesAdicionales"))">
                            @(IsVisible("disposicionesAdicionales") ? "▼" : "►")
                        </button>
                        Disposiciones Adicionales
                    </h4>
                    @if (IsVisible("disposicionesAdicionales"))
                    {
                        @foreach (var disposicion in ley.Disposiciones.DisposicionesAdicionales.Where(d => ContainsSearchTerm(d)))
                        {
                            <div class="disposicion">
                                <h5>@((MarkupString)HighlightText(disposicion.NombreDisposicion))</h5>
                                @if (!string.IsNullOrEmpty(disposicion.ResumenDisposicion))
                                {
                                    <span class="resumen resumen-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.ResumenDisposicion)))
                                    </span>
                                }
                                <details>
                                    <summary>Ver texto completo</summary>
                                    <span class="resumen texto-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.TextoCompletoDisposicion)))
                                    </span>
                                </details>
                            </div>
                        }
                    }
                }

                @if (ley.Disposiciones.DisposicionesTransitorias.Any())
                {
                    <h4>
                        <button @onclick="@(() => ToggleVisibility("disposicionesTransitorias"))">
                            @(IsVisible("disposicionesTransitorias") ? "▼" : "►")
                        </button>
                        Disposiciones Transitorias
                    </h4>
                    @if (IsVisible("disposicionesTransitorias"))
                    {
                        @foreach (var disposicion in ley.Disposiciones.DisposicionesTransitorias.Where(d => ContainsSearchTerm(d)))
                        {
                            <div class="disposicion">
                                <h5>@((MarkupString)HighlightText(disposicion.NombreDisposicion))</h5>
                                @if (!string.IsNullOrEmpty(disposicion.ResumenDisposicion))
                                {
                                    <span class="resumen resumen-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.ResumenDisposicion)))
                                    </span>
                                }
                                <details>
                                    <summary>Ver texto completo</summary>
                                    <span class="resumen texto-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.TextoCompletoDisposicion)))
                                    </span>
                                </details>
                            </div>
                        }
                    }
                }

                @if (ley.Disposiciones.DisposicionesDerogatorias.Any())
                {
                    <h4>
                        <button @onclick="@(() => ToggleVisibility("disposicionesDerogatorias"))">
                            @(IsVisible("disposicionesDerogatorias") ? "▼" : "►")
                        </button>
                        Disposiciones Derogatorias
                    </h4>
                    @if (IsVisible("disposicionesDerogatorias"))
                    {
                        @foreach (var disposicion in ley.Disposiciones.DisposicionesDerogatorias.Where(d => ContainsSearchTerm(d)))
                        {
                            <div class="disposicion">
                                <h5>@((MarkupString)HighlightText(disposicion.NombreDisposicion))</h5>
                                @if (!string.IsNullOrEmpty(disposicion.ResumenDisposicion))
                                {
                                    <span class="resumen resumen-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.ResumenDisposicion)))
                                    </span>
                                }
                                <details>
                                    <summary>Ver texto completo</summary>
                                    <span class="resumen texto-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.TextoCompletoDisposicion)))
                                    </span>
                                </details>
                            </div>
                        }
                    }
                }

                @if (ley.Disposiciones.DisposicionesFinales.Any())
                {
                    <h4>
                        <button @onclick="@(() => ToggleVisibility("disposicionesFinales"))">
                            @(IsVisible("disposicionesFinales") ? "▼" : "►")
                        </button>
                        Disposiciones Finales
                    </h4>
                    @if (IsVisible("disposicionesFinales"))
                    {
                        @foreach (var disposicion in ley.Disposiciones.DisposicionesFinales.Where(d => ContainsSearchTerm(d)))
                        {
                            <div class="disposicion">
                                <h5>@((MarkupString)HighlightText(disposicion.NombreDisposicion))</h5>
                                @if (!string.IsNullOrEmpty(disposicion.ResumenDisposicion))
                                {
                                    <span class="resumen resumen-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.ResumenDisposicion)))
                                    </span>
                                }
                                <details>
                                    <summary>Ver texto completo</summary>
                                    <span class="resumen texto-disposicion">
                                        @((MarkupString)HighlightText(RenderMarkdown(disposicion.TextoCompletoDisposicion)))
                                    </span>
                                </details>
                            </div>
                        }
                    }
                }
            }
        }
    </div>
}
@code {
    private Ley ley;
    private Dictionary<string, bool> visibilityState = new Dictionary<string, bool>();
    private string searchTerm = "";
    private List<Titulo> filteredTitulos = new List<Titulo>();
    // Add a new field to store filtered dispositions
    private Disposiciones filteredDisposiciones;

    private class LeyInfo
    {
        public string Titulo { get; set; }
        public string NombreArchivo { get; set; }
    }

    private List<LeyInfo> leyesPreexistentes = new List<LeyInfo>
    {
        new LeyInfo { Titulo = "Constitución española", NombreArchivo = "Constitucion_espanola.json" },
        new LeyInfo { Titulo = "Ley de prueba", NombreArchivo = "otraley.json" },
        new LeyInfo { Titulo = "Ley de Educación", NombreArchivo = "Ley3.json" }
        // Añade aquí más leyes según sea necesario
    };


    protected override void OnInitialized()
    {

        Ley ley1 = new Ley
            {
                NombreLey = "Ley de Ejemplo",
                Disposiciones = new Disposiciones
                {
                    DisposicionesAdicionales = new List<Disposicion>
                {
                    new Disposicion
                    {
                        NombreDisposicion = "Primera",
                        ResumenDisposicion = "Resumen de la primera disposición adicional",
                        TextoCompletoDisposicion = "Texto completo de la primera disposición adicional"
                    }
                },
                    DisposicionesTransitorias = new List<Disposicion>
                {
                    new Disposicion
                    {
                        NombreDisposicion = "Primera Transitoria",
                        ResumenDisposicion = "Resumen de la primera disposición transitoria",
                        TextoCompletoDisposicion = "Texto completo de la primera disposición transitoria"
                    }
                },
                    DisposicionesDerogatorias = new List<Disposicion>(),
                    DisposicionesFinales = new List<Disposicion>()
                }
            };

        // Configurar las opciones de serialización
        JsonSerializerOptions options1 = new JsonSerializerOptions
            {
                WriteIndented = true,
                PropertyNamingPolicy = null
            };

        // Serializar la instancia de Ley a JSON
        string jsonString = JsonSerializer.Serialize(ley1, options1);
        Ley ley2 = JsonSerializer.Deserialize<Ley>(jsonString,options1);
        base.OnInitialized();
        Search();
    }

    private async Task CargarLeyPreexistente(ChangeEventArgs e)
    {
        var nombreArchivo = e.Value.ToString();
        if (!string.IsNullOrEmpty(nombreArchivo))
        {
            try
            {
                var response = await HttpClient.GetStringAsync($"Leyes/{nombreArchivo}");
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        PropertyNamingPolicy = null,
                        WriteIndented = true
                    };
                ley = JsonSerializer.Deserialize<Ley>(response,options);
                InitializeVisibilityState();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar la ley preexistente: {ex.Message}");
            }
        }
        Search();
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            var jsonContent = System.Text.Encoding.UTF8.GetString(buffer);
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    PropertyNamingPolicy = null,
                    WriteIndented = true
                };
            ley = JsonSerializer.Deserialize<Ley>(jsonContent,options);
            InitializeVisibilityState();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar el archivo: {ex.Message}");
        }
        Search();
    }


    private void Search()
    {
        if (ley == null)
        {
            filteredTitulos = new List<Titulo>();
            return;
        }

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredTitulos = ley.Titulos;
        }
        else
        {
            filteredTitulos = ley.Titulos
                .Where(t => ContainsSearchTerm(t))
                .ToList();
        }

        StateHasChanged();
    }

    private bool ContainsSearchTerm(Titulo titulo)
    {
        return ContainsSearchTermIgnoreCase(titulo.NombreTitulo) ||
               ContainsSearchTermIgnoreCase(titulo.ResumenTitulo) ||
               titulo.Articulos.Any(ContainsSearchTerm) ||
               titulo.Capitulos.Any(ContainsSearchTerm);
    }

    private bool ContainsSearchTerm(Capitulo capitulo)
    {
        return ContainsSearchTermIgnoreCase(capitulo.NombreCapitulo) ||
               ContainsSearchTermIgnoreCase(capitulo.ResumenCapitulo) ||
               capitulo.Articulos.Any(ContainsSearchTerm) ||
               capitulo.Secciones.Any(ContainsSearchTerm);
    }

    private bool ContainsSearchTerm(Seccion seccion)
    {
        return ContainsSearchTermIgnoreCase(seccion.NombreSeccion) ||
               ContainsSearchTermIgnoreCase(seccion.ResumenSeccion) ||
               seccion.Articulos.Any(ContainsSearchTerm);
    }

    private bool ContainsSearchTerm(Articulo articulo)
    {
        return ContainsSearchTermIgnoreCase(articulo.NombreArticulo) ||
               ContainsSearchTermIgnoreCase(articulo.ResumenArticulo) ||
               ContainsSearchTermIgnoreCase(articulo.TextoCompletoArticulo);
    }

    private bool ContainsSearchTerm(Disposicion disposicion)
    {
        return ContainsSearchTermIgnoreCase(disposicion.NombreDisposicion) ||
               ContainsSearchTermIgnoreCase(disposicion.ResumenDisposicion) ||
               ContainsSearchTermIgnoreCase(disposicion.TextoCompletoDisposicion);
    }
    private bool ContainsSearchTermIgnoreCase(string text)
    {
        return !string.IsNullOrEmpty(text) && text.IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) >= 0;
    }


    private void InitializeVisibilityState()
    {
        visibilityState.Clear();
        visibilityState["disposiciones"] = false;
        visibilityState["disposicionesAdicionales"] = false;
        visibilityState["disposicionesTransitorias"] = false;
        visibilityState["disposicionesDerogatorias"] = false;
        visibilityState["disposicionesFinales"] = false;

        if (ley != null)
        {
            foreach (var titulo in ley.Titulos)
            {
                visibilityState[$"titulo-{titulo.NombreTitulo}"] = false;
                foreach (var capitulo in titulo.Capitulos)
                {
                    visibilityState[$"capitulo-{capitulo.NombreCapitulo}"] = false;
                    foreach (var seccion in capitulo.Secciones)
                    {
                        visibilityState[$"seccion-{seccion.NombreSeccion}"] = false;
                        foreach (var articulo in seccion.Articulos)
                        {
                            visibilityState[$"articulo-{articulo.NumeroArticulo}"] = false;
                        }
                    }
                    foreach (var articulo in capitulo.Articulos)
                    {
                        visibilityState[$"articulo-{articulo.NumeroArticulo}"] = false;
                    }
                }
                foreach (var articulo in titulo.Articulos)
                {
                    visibilityState[$"articulo-{articulo.NumeroArticulo}"] = false;
                }
            }
        }
    }
    private void ToggleVisibility(string key)
    {
        Console.WriteLine($"ToggleVisibility llamado para: {key}");
        if (visibilityState.ContainsKey(key))
        {
            visibilityState[key] = !visibilityState[key];
            Console.WriteLine($"Nuevo estado para {key}: {visibilityState[key]}");
        }
        else
        {
            visibilityState[key] = true;
            Console.WriteLine($"Nuevo estado creado para {key}: true");
        }
        StateHasChanged();
    }

    private bool IsVisible(string key)
    {
        var isVisible = visibilityState.ContainsKey(key) && visibilityState[key];
        Console.WriteLine($"IsVisible para {key}: {isVisible}");
        return isVisible;
    }

    private string RenderMarkdown(string markdown)
    {
        if (string.IsNullOrEmpty(markdown))
            return string.Empty;

        markdown = markdown.Replace("\\n", "\n");

        var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseSoftlineBreakAsHardlineBreak()
            .Build();

        return Markdown.ToHtml(markdown, pipeline);
    }

    private string HighlightText(string text)
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            return text;
        }

        var regex = new System.Text.RegularExpressions.Regex(searchTerm, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        return regex.Replace(text, match => $"<span class=\"highlight\">{match.Value}</span>");
    }
}

<style>
    .titulo, .capitulo, .seccion, .articulo, .disposicion {
        margin-left: 20px;
        margin-bottom: 10px;
    }

    details {
        margin-left: 20px;
    }

    button {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 1em;
    }

    .highlight {
        background-color: yellow;
        font-weight: bold;
    }
</style>